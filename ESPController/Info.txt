diyBMS Pylontech CAN-Bus Integration by Trajilovic Goran

Description

This project enables seamless integration between Pylontech BMS (Battery Management System) and Victron Cerbo GX via CAN-Bus using an ESP32 microcontroller. The system automatically detects Master and Slave modules, assigns unique IDs, aggregates battery data, and ensures stable communication with Victron.

Features

‚úÖ Automatic Master & Slave Detection
‚úÖ Duplicate ID Correction & EEPROM Storage
‚úÖ Real-time Data Processing & Aggregation
‚úÖ Victron Compatible CAN-Bus Communication
‚úÖ Logging Support for ESP-IDF & Arduino Serial

üìå How It Works

1Ô∏è‚É£ Master & Slave Auto-Detection
	‚Ä¢	The Master module (ID 0x351) is automatically recognized.
	‚Ä¢	Slave modules (0x360+) are assigned dynamically.
	‚Ä¢	If only one module is present, it operates in Master-only mode.

2Ô∏è‚É£ Handling Duplicate CAN-IDs
	‚Ä¢	If two modules share the same CAN-ID, the second module is assigned a new free ID.
	‚Ä¢	Newly assigned IDs are stored in EEPROM for persistence.
	‚Ä¢	Prevents conflicts & ensures stable communication.

3Ô∏è‚É£ Data Processing for Victron
	‚Ä¢	Voltage (V): Only the Master‚Äôs voltage is sent (Victron does not require summation).
	‚Ä¢	Current (A): The total current from all modules is calculated and sent.
	‚Ä¢	State of Charge (SoC %): The average SoC of all modules is computed and transmitted.

4Ô∏è‚É£ Victron CAN-Bus Data Transmission
	‚Ä¢	The ESP32 sends battery data to Victron at ID 0x355.
	‚Ä¢	Automatic error handling & ID correction ensures reliable communication.

üìå Example Serial Output

Single Module (Master Only)

[diybms-pylon] Module 0 [MASTER]: ID 0x351, 52.3V, 8.4A, SoC: 98.0%
[diybms-pylon] Sent to Victron: 52.3V, 8.4A, SoC: 98.0%

Multiple Modules (Master + Slaves)

[diybms-pylon] Module 0 [MASTER]: ID 0x351, 52.3V, 8.4A, SoC: 98.0%
[diybms-pylon] Module 1 [SLAVE]: ID 0x360, 52.1V, 8.3A, SoC: 97.8%
[diybms-pylon] Module 2 [SLAVE]: ID 0x361, 52.2V, 8.5A, SoC: 98.1%
[diybms-pylon] Sent to Victron: 52.3V, 25.2A, SoC: 98.0%

üìå Installation & Setup

1Ô∏è‚É£ Flash the ESP32 with the provided firmware.
2Ô∏è‚É£ Connect the ESP32 CAN-Bus interface to the Pylontech BMS and Victron Cerbo GX.
3Ô∏è‚É£ Monitor serial output to verify ID assignment & data transmission.
4Ô∏è‚É£ Ensure Victron VenusOS recognizes the battery correctly.

üìå Future Improvements
	‚Ä¢	‚ö° Adaptive load balancing for multiple BMS clusters
	‚Ä¢	‚ö° More detailed error handling for Victron VenusOS
	‚Ä¢	‚ö° WiFi integration for remote monitoring

üìå License

This project is open-source and follows the MIT license. Contributions are welcome!

üìå Contact

For support or questions, feel free to create an issue on GitHub or reach out to the community.
